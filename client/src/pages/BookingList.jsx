
import React, { useState } from "react";
import { FaSearch } from "react-icons/fa";
import { Link, useNavigate } from "react-router-dom";
import { useDeleteBookingMutation, useGetBookingsQuery } from "../redux/api/formApi";
import { toast } from "react-toastify";

const BookingList = () => {
    const [deleteBooking] = useDeleteBookingMutation();

    const navigate = useNavigate()
    const [currentPage, setCurrentPage] = useState(1);
    const [usersPerPage, setUsersPerPage] = useState(5);
    const [search, setSearch] = useState("");

    const { data = [], isLoading, isError } = useGetBookingsQuery();
    const handleDelete = async (id) => {
        try {
            await deleteBooking(id).unwrap();
            toast.success("‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§π‡§ü‡§µ‡§≤‡•á ‡§ó‡•á‡§≤‡•á ‚úÖ");
        } catch (error) {
            console.error("‚ùå Delete failed:", error);
            toast.error("‡§π‡§ü‡§µ‡§§‡§æ‡§®‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä ‡§Ü‡§≤‡•Ä ‚ùå");
        }
    };

    if (isLoading) {
        return <div className="text-center text-xl font-semibold p-10">‡§≤‡•ã‡§° ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á...</div>;
    }

    if (isError) {
        return <div className="text-center text-xl text-red-500 p-10">‡§°‡•á‡§ü‡§æ ‡§Æ‡§ø‡§≥‡§æ‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä ‚ùå</div>;
    }

    const formattedData = data.map((item) => ({
        name: item.name || "N/A",
        event: item.eventType || "‚Äî",
        date:
            item.startDate && item.endDate
                ? `${new Date(item.startDate).toLocaleDateString()} - ${new Date(item.endDate).toLocaleDateString()}`
                : "N/A",
        venue: item.location || "N/A",
        phone: [item.phone1, item.phone2].filter(Boolean),
        status: item.status || "Enquiry", // ‡§ú‡§∞ status ‡§®‡§∏‡§≤‡•Ä ‡§§‡§∞‡•Ä "Enquiry" ‡§¶‡§æ‡§ñ‡§µ‡•á‡§≤
        total: item.totalRs || "-",
        balance: item.balance || "-",
    }));

    // üîç Search filter (‡§∏‡§∞‡•ç‡§ö‡§®‡•á Enquiry ‡§™‡§£ ‡§∂‡•ã‡§ß‡§§‡§æ ‡§Ø‡•á‡§à‡§≤)
    const filteredData = formattedData.filter((row) => {
        const searchLower = search.toLowerCase();
        return (
            row.name.toLowerCase().includes(searchLower) ||
            row.event.toLowerCase().includes(searchLower) ||
            row.status.toLowerCase().includes(searchLower) ||
            row.phone.some((num) => num.includes(searchLower))
        );
    });

    // üìÑ Pagination logic
    const indexOfLastRow = currentPage * usersPerPage;
    const indexOfFirstRow = indexOfLastRow - usersPerPage;
    const currentRows = filteredData.slice(indexOfFirstRow, indexOfLastRow);
    const totalPages = Math.ceil(filteredData.length / usersPerPage);

    return (
        <div className="p-6">
            <h2 className="text-center text-2xl font-bold mb-4">‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó / ‡§è‡§®‡§ï‡•ç‡§µ‡§æ‡§Ø‡§∞‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü</h2>

            {/* üîç Search Bar */}
            <div className="bg-white p-4 rounded-md mb-4">
                <div className="flex items-center gap-2 border rounded p-3">
                    <FaSearch className="text-gray-500" />
                    <input
                        type="text"
                        value={search}
                        onChange={(e) => {
                            setSearch(e.target.value);
                            setCurrentPage(1);
                        }}
                        placeholder="‡§®‡§æ‡§µ, ‡§´‡•ã‡§®, ‡§á‡§µ‡•ç‡§π‡•á‡§Ç‡§ü, ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§∂‡•ã‡§ß‡§æ"
                        className="w-full outline-none"
                    />
                </div>
            </div>

            {/* üßæ Table */}
            <div className="overflow-x-auto p-3 text-black">
                <table className="table w-full border">
                    <thead>
                        <tr className="bg-orange-500 text-white text-center">
                            <th>‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ</th>
                            <th>‡§á‡§µ‡•ç‡§π‡•á‡§Ç‡§ü ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</th>
                            <th>‡§§‡§æ‡§∞‡•Ä‡§ñ</th>
                            <th>‡§†‡§ø‡§ï‡§æ‡§£</th>
                            <th>‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞</th>
                            <th>‡§∏‡•ç‡§•‡§ø‡§§‡•Ä</th>
                            <th>‡§è‡§ï‡•Ç‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ</th>
                            <th>‡§∂‡§ø‡§≤‡•ç‡§≤‡§ï</th>
                            <th>‡§ï‡•É‡§§‡•Ä</th>
                        </tr>
                    </thead>
                    <tbody>
                        {currentRows.length > 0 ? (
                            currentRows.map((row, index) => (
                                <tr
                                    key={index}
                                    className={`text-center ${row.status === "Enquiry"
                                        ? "bg-yellow-50"
                                        : "bg-white"
                                        }`}
                                >
                                    <td>{row.name}</td>
                                    <td>{row.event}</td>
                                    <td>{row.date}</td>
                                    <td>{row.venue}</td>
                                    <td>
                                        {row.phone.map((num, i) => (
                                            <div key={i}>{num}</div>
                                        ))}
                                    </td>

                                    {/* Enquiry ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§µ‡•á‡§ó‡§≥‡§Ç ‡§∞‡§Ç‡§ó ‡§¶‡§æ‡§ñ‡§µ‡•Ç */}
                                    <td
                                        className={`font-semibold ${row.status === "Enquiry"
                                            ? "text-yellow-600"
                                            : "text-green-600"
                                            }`}
                                    >
                                        {row.status}
                                    </td>

                                    <td>{row.total}</td>
                                    <td>{row.balance}</td>
                                    <td className="flex justify-center gap-2">
                                        <button
                                            className="btn btn-sm bg-orange-500 text-white"
                                            onClick={() => navigate("/form", { state: { booking: data[index] } })}
                                        >
                                            ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§æ
                                        </button>
                                        <button
                                            className="btn btn-sm bg-red-500 text-white"
                                            onClick={() => handleDelete(data[index]._id)}
                                        >
                                            ‡§π‡§ü‡§µ‡§æ
                                        </button>

                                        {/* ‡§´‡§ï‡•ç‡§§ Booking ‡§ù‡§æ‡§≤‡§Ç ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞‡§ö ‡§¨‡§ø‡§≤ ‡§¨‡§ü‡§® */}
                                        {row.status !== "Enquiry" && (
                                            <Link
                                                to="/bill"
                                                state={{ booking: data[index] }}  // üëâ ‡§Æ‡•Ç‡§≥ MongoDB ‡§°‡•á‡§ü‡§æ ‡§™‡§æ‡§∏ ‡§ï‡§∞
                                                className="btn btn-sm bg-blue-500 text-white"
                                            >
                                                View Bill
                                            </Link>
                                        )}
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="9" className="text-center p-4">
                                    ‡§ï‡§æ‡§π‡•Ä‡§π‡•Ä ‡§∏‡§æ‡§™‡§°‡§≤‡•á ‡§®‡§æ‡§π‡•Ä ‚ùå
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>

            {/* üìë Pagination */}
            <div className="flex justify-between items-center mt-4">
                <button
                    className="btn btn-sm bg-orange-500 text-white"
                    onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
                >
                    ‡§Æ‡§æ‡§ó‡•Ä‡§≤
                </button>
                <p>
                    ‡§™‡•É‡§∑‡•ç‡§† {currentPage} ‡§™‡•à‡§ï‡•Ä {totalPages}
                </p>
                <button
                    className="btn btn-sm bg-orange-500 text-white"
                    onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
                >
                    ‡§™‡•Å‡§¢‡•Ä‡§≤
                </button>
            </div>
        </div>
    );
};

export default BookingList;



